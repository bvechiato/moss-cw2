;; note this package declares the following variables and procedures
;; so you must not use these names unless referring to these.
;;
;; variables: 
;; procedures: create-initial-network             - called in setup
;;             layout-network                     - called in setup 
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CREATION PROCEDURES ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Create the initial two-node network and expand it to a scale-free structure
to create-initial-network
  make-initial-nodes
  expand-network-to-scale-free
end


;; Create two initial turtles and link them
to make-initial-nodes
  make-node nobody 1       ;; First node, unattached
  make-node turtle 0 1     ;; Second node, attached to first node
end


;; Create a scale-free network by adding nodes with preferential attachment
to expand-network-to-scale-free
  while [count turtles < number-of-agents] [
    ask links [ set color gray ]
    
    ;; Decide on the number of connections based on a weighted probability
    let high-connections? (random-float 1 < 0.2) ;; 20% chance to be a high-connection node
    let max-connections (ifelse-value high-connections? [random number-of-agents - 3] [random 50]) + 2
    
    make-node find-partner max-connections
  ]
  
  ask turtles [
    set size max (list 1 (length followers ^ 0.5)) 
    set color ifelse-value (length followers > median [length followers] of turtles) [green] [red]
    set color ifelse-value (length followers = 0) [blue] [color]
  ]
  
  
  let followers-list [length followers] of turtles
  let following-list [length following] of turtles
  
  print("- FOLLOWERS")
  print (word "Average number of followers: " mean followers-list)
  print (word "Median number of followers: " median followers-list)
  print (word "Maximum number of followers: " max followers-list)
  print (word "Minimum number of followers: " min followers-list)
  
  print("- FOLLOWING")
  print (word "Average number of following: " mean following-list)
  print (word "Median number of following: " median following-list)
  print (word "Maximum number of following: " max following-list)
  print (word "Minimum number of following: " min following-list)
end

;; Create a new node and link it to an existing partner node
to make-node [old-node max-connections]
  create-turtles 1 [
    set color red
    initialise-turtle
    
    ;; Create connections up to max-connections
    let connections 0
    while [connections < max-connections] [
      let partner find-partner
      set connections connections + 1
      if partner != nobody and partner != self and not link-neighbor? partner [
        create-link-to partner
        move-to partner
        fd 50
        
        ;; Update followers and following lists
        ask partner [
          set followers lput myself followers ;; Add this node to partner's followers
        ]
        set following lput partner following  ;; Add partner to this node's following list
      ]
    ]
  ]
end



;; Find a preferential partner based on an existing node's connections
to-report find-partner
  if any? turtles [
    if any? links [
      report [one-of both-ends] of one-of links  ;; Select a turtle from an existing link
    ]
    ;; If no links, select any turtle
    report one-of turtles
  ]
  report nobody  ;; If there are no turtles, report nobody
end





;;;;;;;;;;;;;;
;;; LAYOUT ;;;
;;;;;;;;;;;;;;

;; Arrange the network layout for visual clarity
to layout-network
  repeat 3 [
    let factor sqrt count turtles
    layout-spring turtles links (1 / factor) (7 / factor) (1 / factor)
    display
  ]
  center-layout
end

;; Keep the layout centered within the world bounds
to center-layout
  let x-offset max [xcor] of turtles + min [xcor] of turtles
  let y-offset max [ycor] of turtles + min [ycor] of turtles
  set x-offset limit-magnitude x-offset 0.1
  set y-offset limit-magnitude y-offset 0.1
  ask turtles [ setxy (xcor - x-offset / 2) (ycor - y-offset / 2) ]
end

;; Limit the magnitude of movement to prevent layout edges from extending too far
to-report limit-magnitude [number limit]
  if number > limit [ report limit ]
  if number < (- limit) [ report (- limit) ]
  report number
end