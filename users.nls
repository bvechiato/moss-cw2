breed [users user]

users-own [
  belief                 ; Belief level of each agent (-1 to +1)
  followers              ; List of agents following this agent
  following              ; List of agents this agent follows
  average-echo
  local-echo-eval
  seen
  susceptibility-threshold
  belief-purity
  opinion-sd
]


;;;;;;;;;;;;;;;;;
;;; INIT USER ;;;
;;;;;;;;;;;;;;;;;
to initialise-agent-attributes
  ask users [initialise-users]
end

;; Assign belief values, states, and follower lists to agents
to initialise-users
  set belief (random-float 2 - 1)    ;; Random belief between -1 and 1
  set followers []                   ;; Start with an empty list of followers
  set following []                   ;; Start with an empty list of followers
  set seen []
  set local-echo-eval 0 
  set susceptibility-threshold sample-beta
end


;;;;;;;;;;;;;;;;;;;;;;;
;;; BELIEF UPDATING ;;;
;;;;;;;;;;;;;;;;;;;;;;;
to-report deffuant-beliefs [current-belief post-belief susceptibility]
    ifelse abs (post-belief - current-belief) < susceptibility
    [report (current-belief + 0.05 * (post-belief - current-belief))]
    [report current-belief]
end

to update-belief [post-belief]
  set belief deffuant-beliefs belief post-belief susceptibility-threshold
  
  let red-component (1 - belief) * 255
  let green-component (1 + belief) * 255
  set color rgb red-component green-component 0
end

to-report sample-beta
  py:set "alpha" 1.7
  py:set "beta_param" 6.0
 
  py:run "mapped_sample = 2 * beta.rvs(alpha, beta_param, random_state=rng)"

  report py:runresult "mapped_sample"
end
